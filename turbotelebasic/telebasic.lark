%import common.INT
%import common.WORD
%import common.WS
%import common.WS_INLINE
%import common.NUMBER
%import common.SIGNED_NUMBER
%import common.NEWLINE
%import common.CNAME

%ignore WS
%ignore WS_INLINE

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

POW: "^"

LT: "<"
GT: ">"
EQ: "="
NE: "<>"

LTEQ: "<="
GTEQ: ">="

AND: "AND"
OR: "OR"

SEPARATOR: (";" | ":" | "\\")

?opp: AND
    | OR
    | MUL
    | DIV
    | ADD
    | SUB
    | POW
    | LTEQ
    | GTEQ
    | LT
    | GT
    | EQ
    | NE

string: ("\"" (/[^"]+/)? "\"") | ("'" (/[^']+/)? "'")

ident: /(?!print|input|dim|then|if)[a-zA-Z]+/i "$"?

args: expr ("," WS_INLINE? expr)*
call: ident WS_INLINE? "(" args? ")"

expr_rhs: (WS_INLINE? opp WS_INLINE? expr)

access: ident WS_INLINE? "(" WS_INLINE? comma_sep_expr WS_INLINE? ")"
?expr_inner: (string | NUMBER | SIGNED_NUMBER | ident | access)
expr: ("+" | "-")? (call | expr_inner | ("(" expr ")")) expr_rhs?

comma_sep_expr: expr ("," WS_INLINE? expr)*

?body: stmt | comma_sep_expr

print: ("print" | "PRINT") " "* expr* (("," WS_INLINE?)+ expr)*

print_using: ("print" | "PRINT") " "* "USING" WS_INLINE? expr ("," WS_INLINE? expr)*

input: ("input" | "INPUT") " "* comma_sep_expr

label: INT

?then_body: (label | goto | print | assign | aug_assign | gosub | if)
then: ("then" | "THEN") then_body

?dim_one: ident "(" args ")"
dim: ("dim" | "DIM") WS_INLINE? dim_one ("," WS_INLINE? dim_one)*

step: ("step" | "STEP") WS_INLINE? expr
to: ("to" | "TO") expr
for: ("for" | "FOR") WS_INLINE? ident EQ expr WS_INLINE? to WS_INLINE? step?

next: ("next" | "NEXT") WS_INLINE? comma_sep_expr

assign: ("let" | "LET")? WS_INLINE? ident WS_INLINE? "=" WS_INLINE? expr

aug_assign: ("let" | "LET")? WS_INLINE? ident WS_INLINE? "(" WS_INLINE? comma_sep_expr WS_INLINE? ")" WS_INLINE? "=" WS_INLINE? expr

comment: ("REM" | "'") /[^\n]+/

read: ("read" | "READ") WS_INLINE? comma_sep_expr

if: ("if" | "IF") WS_INLINE? expr? WS_INLINE? (then | (("else" | "ELSE") then_body | then))

defint: ("defint" | "DEFINT") expr

locate: ("locate" | "LOCATE") comma_sep_expr

goto: ("goto" | "GOTO") WS_INLINE? (label | expr)
gosub: ("gosub" | "GOSUB") WS_INLINE? (label | expr)

def_args: ident ("," WS_INLINE ident)*
def: ("def fn" | "DEF FN") ident WS_INLINE? "(" def_args ")" WS_INLINE? "=" WS_INLINE? expr

data: ("data" | "DATA") WS_INLINE expr ("," WS_INLINE* expr)*

color: ("color" | "COLOR") expr

on: ("on" | "ON") expr WS_INLINE? (("goto" | "GOTO") | "GO TO" | ("gosub" | "GOSUB")) WS_INLINE? comma_sep_expr

RESTORE: "RESTORE"
END: "END"

trace: ("troff"| "TROFF")
    | ("tron" | "TRON")

?stmt: comment
    | on
    | data
    | print
    | read
    | locate
    | print_using
    | defint
    | assign
    | aug_assign
    | next
    | if
    | for
    | dim
    | goto
    | gosub
    | trace
    | input
    | RESTORE
    | END

line: label? WS_INLINE? body WS_INLINE?

start: (SEPARATOR | NEWLINE)
    | (line WS_INLINE? (SEPARATOR+ | comment? NEWLINE | (SEPARATOR | NEWLINE)))*
